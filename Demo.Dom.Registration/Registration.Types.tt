<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#
// Copyright (c) Microsoft Corporation.  All rights reserved.

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
StringBuilder attBuild = new StringBuilder();

string inputFile = @"Registration.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);


// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(entity.Name + ".cs");
    WriteHeader(namespaceName, code);
    InitialiseMemberOrder();
#>
public <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#><#=code.StringBefore(" : ", code.Escape(entity.BaseType))#>
{

<#  region.Begin("Primitive Properties");
 foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		EmitValueProperty(edmProperty);
    }
    region.End();
	
	region.Begin("Complex Properties");
   foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity))
    {		
		EmitComplexProperty(edmProperty);
    }
    region.End();
	
	region.Begin("Navigation Properties");
  foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
        {    
			if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many) {			
				EmitCollection(navProperty);   
			} else {					 
				EmitNavigationProperty(navProperty);
			}
		}
    region.End();
#>
}
<#
    WriteFooter(namespaceName);
}

// Emit Complex Types
foreach (ComplexType complex in ItemCollection.GetItems<ComplexType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(complex.Name + ".cs");
    WriteHeader(namespaceName, code);
#>

[Inline]
public partial class <#=code.Escape(complex)#>
{
<#
    region.Begin("Primitive Properties");
    foreach (EdmProperty edmProperty in complex.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complex))
    {		
		EmitValueProperty(edmProperty);
    }
    region.End();
#>
<#
    region.Begin("Complex Properties");
    foreach (EdmProperty edmProperty in complex.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == complex))
    {		
		EmitComplexProperty(edmProperty);
    }
    region.End();
#>
}
<#
    WriteFooter(namespaceName);
}
fileManager.Process(); #>

<#+ void WriteHeader(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
#>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using NakedObjects;

<#+
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void WriteFooter(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

string PropertyAccessibilityAndVirtual(EdmMember member)
{
    string accessibility = Accessibility.ForProperty(member);
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}

string ReadOnlyPropertyAccessibilityAndVirtual(EdmMember member)
{
    string accessibility = Accessibility.ForReadOnlyProperty(member);
    if (accessibility != "private")
    {
        return accessibility + " virtual";
    }

    return accessibility;
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

//Building attributes
private StringBuilder attBuild; 

private void StartAttributeLine() {
	attBuild = new StringBuilder();
	attBuild.Append("[");
}

private void AddAttribute(string att) {
	if (attBuild.Length > 1) {
		attBuild.Append(", ");
	}
	attBuild.Append(att);
}

private void OutputAttributeLine() {
	if (attBuild.Length == 1) {
		return; //It means no attribute has been added to the line
    }
	attBuild.Append("]"); #>
<#= attBuild.ToString() #>
<#+    attBuild = null;
}   

//Emit a Value Property
private void EmitValueProperty(EdmProperty edmProperty) {
	var code = new CodeGenerationTools(this);  
	CodeRegion region = new CodeRegion(this, 1);
	string edmType  = edmProperty.TypeUsage.ToString().Substring(4);
	region.Begin(code.Escape(edmProperty)+" ("+edmType+")");
	StartAttributeLine();
    AddAttribute(NextMemberOrder());
    if (edmProperty.Nullable) { 
		AddAttribute("Optionally");
    }
    if (edmProperty.TypeUsage.ToString().Equals("Edm.String")) {
    	int maxLength = 0;
		var facetValue = edmProperty.TypeUsage.Facets.Where(x => x.Name == "MaxLength").First().Value;
		if (facetValue != null) {
    		if (Int32.TryParse(facetValue.ToString(), out maxLength)) { 
				AddAttribute("StringLength("+maxLength.ToString()+")");
   			}
		}
  	} 
	if (edmProperty.TypeUsage.ToString().Equals("Edm.DateTime")) {
    AddAttribute("Mask(\"d\")");
    }
	OutputAttributeLine(); #>
    public virtual <#=code.Escape(edmProperty.TypeUsage) #>  <#=edmProperty.Name#> {get; set;}
<#+ 
	region.End();
}

//Emit a Complex Property
private void EmitComplexProperty(EdmProperty edmProperty) {
	var code = new CodeGenerationTools(this);  
	CodeRegion region = new CodeRegion(this, 1);
	string edmType  = edmProperty.TypeUsage.ToString().Substring(4);
	region.Begin(code.Escape(edmProperty)+" ("+edmType+")"); #>
	
	private <#=code.Escape(edmProperty.TypeUsage) #> <#=code.FieldName(edmProperty)#> = new <#=code.Escape(edmProperty.TypeUsage) #>();
	
	<#+StartAttributeLine();
    AddAttribute(NextMemberOrder());
	OutputAttributeLine(); #>
    public virtual <#=code.Escape(edmProperty.TypeUsage) #>  <#=edmProperty.Name#> {
        get
        {
            return <#=code.FieldName(edmProperty)#>;
        }
		set
		{
		    <#=code.FieldName(edmProperty)#> = value;
		}
    }
<#+ 
	region.End();
}
	
//Emit a Collection
private void EmitCollection(NavigationProperty navProperty) {
		var code = new CodeGenerationTools(this);  
		CodeRegion region = new CodeRegion(this, 1);
	    EntityType toType = navProperty.ToEndMember.GetEntityType();
		region.Begin(code.Escape(navProperty)+" (Collection of "+toType.Name+")"); #>
		
	    private ICollection<<#=code.Escape(toType) #>> <#=code.FieldName(navProperty)#> = new List<<#=code.Escape(toType) #>>();
		
		<#+StartAttributeLine();
    AddAttribute(NextMemberOrder());
	AddAttribute("Disabled");
	OutputAttributeLine(); #>
    public virtual ICollection<<#=code.Escape(toType) #>> <#=navProperty.Name#>
    {
        get
        {
            return <#=code.FieldName(navProperty)#>;
        }
		set
		{
		    <#=code.FieldName(navProperty)#> = value;
		}
    }
<#+ 
	region.End();
}

//Emit (a single) navigation property' 
public void EmitNavigationProperty(NavigationProperty navProperty) {
		var code = new CodeGenerationTools(this);  
		CodeRegion region = new CodeRegion(this, 1);	
	    EntityType toType  = navProperty.ToEndMember.GetEntityType(); 
		region.Begin(code.Escape(navProperty)+" ("+toType.Name+")");#>
		
<#+ 
    StartAttributeLine();
    AddAttribute(NextMemberOrder());
	OutputAttributeLine(); #>
	public virtual <#=code.Escape(toType)#> <#=code.Escape(navProperty)#> {get; set;}
<#+ 
	region.End();
}

//MemberOrder
private int count; 
private int increment = 10;

private void InitialiseMemberOrder() {
   count = 100; 
}

private string NextMemberOrder() {
	int nmo = count;
	count = count + increment;
	return "MemberOrder("+nmo.ToString() +")";
}
#>
